
Introduction to Vision and Robotics 2018â€“19
Assignment
Deadline:  Week 10 - 4pm 22nd November
__________________________________________________________

Files submitted:
IK.py (Part B)
main.py (Part C)
Torque_ex.py (Part D)
__________________________________________________________

Reporting-Format:
('Distance at start: ', x)                        ==> x being the distance between end-effector and a newly spawned target 
TARGET REACHED!                                   ==> following lines are printed on success
('Distance between end_effector and target: ', x) ==> x being the distance between end-effector and the target on success
('Time needed to reach the target: ', x)          ==> x being the time needed to reach the target
('Average Angle Error:', x)                       ==> x being the absolute angle error in the detection
('Average Velocity Error:', x)                    ==> x being the absolute velocity error caused by the angle error
success x
fail x
__________________________________________________________

Comments on features that potentially require explanation:

PUSH-OUT-SYSTEM (IK, main):
IK.py (Inverse Kinematics file) and main.py (Torque-control) both contain pieces of code that will initiate a force/movement to push the end-effector out of its stuck position in case of it stopping on a local minimum that is not the desired position. No movement causes a timer to start that induces the force/movement after 40s(main)/ 25s(IK). Since the objective is to simply reach the target this techinque fits the purpose.
---------------------
POSITION-ESTIMATION-SYSTEM(IK, main, ObAvoidance):
In case of the system being unable to detect the target (complete darkness) the system will take the previous target as its current target.
In the case of our vision system being unable to detect a certain joint its position will be estimated by its previous velocity. This can cause the arm to spin violently in complete darkness. Since the objective is to simply reach the target this techinque fits the purpose.
---------------------
BONUS-FEATURE/OBSTACLE AVOIDANCE THROUGH POTENTIAL FIELDS:
This section required mainpulations to the Reacher.py.
New code for this section is marked with the following commenting in the submitted Reacher file:

#-----------NEW CODE-------------
(The new code)
#-----------END NEW CODE---------

Reacher.py is our new Reacher file, inside it on line 51 there is a boolean. It is set to true by
default, so will automatically use the obstacle avoidance mode. To turn this off set it to False,
and then it will behave like the default Reacher or run the default Reacher file. 

When the end effector is not in the radius of influence of any obstacle, the closest obstacle
is marked with a white dot. When it is in the radius of any obstacle, a white dot will begin
to flash on the obstacle. Both of these help to understand where the obstacles are relative
to the end effector.

Due to the size of the space and sparcity of obstacles, it can take a while for the end effector 
to be in the radius of influence of an obstacle, meaning it takes a while to see the obstacle 
avoidance system in action. To overcome this we added the charge obstacle mode. On line 526 of 
Torque_ex.py, self.charge_obstacle is set to False by default, in which case the arm behaves 
like the normal trying to reach the target. When this is set to True, the arm will try to make 
the end effector touch the nearest obstacle, quickly displaying our obstacle avoidance system in action.
___________________________________________________________

Kieran Litschel, Frederik Kelbel
